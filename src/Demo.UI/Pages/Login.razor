@page "/"
@page "/Login"
@inject AuthenticationStateProvider asp
@inject ApiService ApiService

<PageTitle>Login - Demo</PageTitle>

<style>
    .login {        
        max-width: 400px;
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: 1rem;
        padding: 1.5rem;
        border-radius: 1rem;        
        box-shadow: 0 0 4px 4px #0001;
        background-color:var(--primary-bg);
        position:relative;
        overflow:hidden;
    }
    .bird {
        position: absolute;
        right:0;
        top: 0;
    }
</style>

<div class="flex jcc aic" style="height:calc(100dvh - 50px)">
    <div class="login">
        <img width="100" height="100" class="bird" src="icon-192.png" alt="Company Logo" />
        <div class="flex-col g8 mb1">
            <h3>Login</h3>
            <p class="muted">Enter your valid credentials.</p>
        </div>
        <div class="flex-col w100">
            <CascadingValue Value="@errors" IsFixed>

                <Input Label="Email" Type="email" Class="mandatory" Focus @bind-Value="@model.Email"
                    Error="@(nameof(model.Email))" />

                <Input Label="Password" Type="password" Class="mandatory" @bind-Value="@model.Password"
                    Error="@(nameof(model.Password))"/>

                <Checkbox Label="Remember me" Checked="@model.RememberMe" OnClick="x => model.RememberMe = x" />

            </CascadingValue>
        </div>
        <p class="error">@errorMessage</p>
        <div class="flex g8 mtb1">
            <Button Text="Login" OnClick="HandleLogin" />
        </div>
        <p>Don't have account? <a href="Register">Register here</a></p>
    </div>
</div>

@code
{
    private LoginRequestDto model = new();
    private Dictionary<string, string>? errors;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        model.Email = await browserExtensions.GetFromLocalStorage("user");
    }

    private async Task HandleLogin()
    {
        errorMessage = null;

        errors = model.Errors();
        if (!model.IsValid) return;

        await browserExtensions.RemoveFromLocalStorage("user");
        var response = await ApiService.Post<LoginRequestDto, UserAuthentication>("/api/v1/Auth/login", model);
        if (response.IsSuccess)
        {            
            if (model.RememberMe && model.Email is not null)
                await browserExtensions.SetToLocalStorage("user", model.Email);
            await ((ApplicationStateProvider)asp).Login(response.Value!);
            browserExtensions.Goto("Home");
        }
        else
        {
            errorMessage = response.StatusCode switch
            {
                System.Net.HttpStatusCode.Forbidden => "Your account may be locked. Check with admin.",
                _ => "Invalid email and/or password.",
            };
        }
    }
}